#include <SoftwareSerial.h>
SoftwareSerial HC05(1,0); // CONNECT 10 WITH TX & 11 WITH RX

float Kp=0,Ki=0,Kd=0;
float error=0, P=0, I=0, D=0, PID_value=0;
float previous_error=0, previous_I=0;
int sensor[5]={0, 0, 0, 0, 0};           // 0(left)-------->(right)4
int initial_motor_speed=100;
void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);
int right_motor_in=A4;
int left_motor_in=A5;
int right_motor_PWM=11;
int left_motor_PWM=10;
int trig_pin_front =4;
int echo_pin_front =5;
int trig_pin_rear =2;
int echo_pin_rear =3;
int Speed ;
char Data;
String Signal;

void setup()
{
 pinMode (right_motor_in,OUTPUT);       
  pinMode (left_motor_in,OUTPUT);      
  pinMode (right_motor_PWM,OUTPUT);           
  pinMode (left_motor_PWM,OUTPUT);
  pinMode (trig_pin_front,OUTPUT);
  pinMode (echo_pin_front,INPUT);
  pinMode (trig_pin_rear,OUTPUT);
  pinMode (echo_pin_rear,INPUT);
  HC05.begin(9600);
 Serial.begin(9600); //Enable Serial Communications
}

void loop()
{
    read_sensor_values();
    calculate_pid();
    motor_control();
}

void read_sensor_values()
{
  sensor[0]=digitalRead(6);
  sensor[1]=digitalRead(7);
  sensor[2]=digitalRead(8);
  sensor[3]=digitalRead(9);
  sensor[4]=digitalRead(12);
  
  if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==0))
  error=4;
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==1)&&(sensor[4]==0))
  error=3;
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==1)&&(sensor[4]==1))
  error=2;
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==1)&&(sensor[4]==1)&&(sensor[4]==1))
  error=1;
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==1)&&(sensor[4]==0)&&(sensor[4]==1))
  error=0;
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[4]==0)&&(sensor[4]==1))
  error=-1;
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==1))
  error=-2;
  else if((sensor[0]==0)&&(sensor[1]==1)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==1))
  error=-3;
  else if((sensor[0]==0)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==1))
  error=-4;
 /* else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==1))
    if(error==-4) error=-5;
    else error=5;*/
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[4]==0)&&(sensor[4]==1))
  error=error;  
    //intersection
  else if(    (  (sensor[0]==0)||(sensor[1]==1)  )&&( (sensor[4]==1)||(sensor[4]==0)  )    )
  error=error;
}

void calculate_pid()
{
    P = error;
    I = I + previous_I;
    D = error-previous_error;
    
    PID_value = (Kp*P) + (Ki*I) + (Kd*D);
    
    previous_I=I;
    previous_error=error;
}

void motor_control()
{
    // Calculating the effective motor speed:
    int left_motor_speed = initial_motor_speed-PID_value;
    int right_motor_speed = initial_motor_speed+PID_value;
    
    // The motor speed should not exceed the max PWM value
    constrain(left_motor_speed,0,255);
    constrain(right_motor_speed,0,255);
  
    analogWrite(left_motor_PWM,left_motor_speed);   //Left Motor Speed
    analogWrite(right_motor_PWM,right_motor_speed);  //Right Motor Speed
    
    // go forward
    digitalWrite (right_motor_in , HIGH);
    digitalWrite (left_motor_in , HIGH);
}
