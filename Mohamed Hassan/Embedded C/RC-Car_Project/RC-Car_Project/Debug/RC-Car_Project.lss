
RC-Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000fba  0000104e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800100  00800100  0000104e  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000936  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003f36  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00003f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fa6  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000557  00000000  00000000  0000503b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000075f  00000000  00000000  00005592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000330  00000000  00000000  00005cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000451  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006f7  00000000  00000000  00006475  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00006b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 33       	cpi	r26, 0x3F	; 63
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 20 01 	call	0x240	; 0x240 <main>
  88:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_PWM_T2>:

#include "Motors.h"
 void init_PWM_T2(uint8_t pin)			//CALCUTE TIME FOR SPEED CALCULATIONS
 {
	 //Fast PWM mode: The Top Value is 0xff ,NonInveting MOde (the OCRx is Cleared on compare match and set on the bottom)
	 sbi(TCCR2A,WGM20);
  90:	e0 eb       	ldi	r30, 0xB0	; 176
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	91 60       	ori	r25, 0x01	; 1
  98:	90 83       	st	Z, r25
	 sbi(TCCR2A,WGM21);
  9a:	90 81       	ld	r25, Z
  9c:	92 60       	ori	r25, 0x02	; 2
  9e:	90 83       	st	Z, r25
	 switch(pin)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	19 f0       	breq	.+6      	; 0xaa <init_PWM_T2+0x1a>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	b1 f4       	brne	.+44     	; 0xd4 <init_PWM_T2+0x44>
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <init_PWM_T2+0x30>
	 {
		 case(1):
		 {
			 sbi(DDRB,PB3);
  aa:	23 9a       	sbi	0x04, 3	; 4
			 cbi(PORTB,PB3);
  ac:	2b 98       	cbi	0x05, 3	; 5
			 //sbi(TCCR2A,COM2A0);
			 sbi(TCCR2A,COM2A1);
  ae:	e0 eb       	ldi	r30, 0xB0	; 176
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
			 OCR2A=255;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	80 93 b3 00 	sts	0x00B3, r24
			 break;
  be:	0a c0       	rjmp	.+20     	; 0xd4 <init_PWM_T2+0x44>
		 }
		 case(2):
		 {
			 sbi(DDRD,PD3);
  c0:	53 9a       	sbi	0x0a, 3	; 10
			 cbi(PORTD,PD3);
  c2:	5b 98       	cbi	0x0b, 3	; 11
			 //sbi(TCCR2A,COM2B0);
			 sbi(TCCR2A,COM2B1);
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	80 83       	st	Z, r24
			 OCR2B=255;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	80 93 b4 00 	sts	0x00B4, r24
			 break;
		 }
	 }
	 //Pre scaler 8
	 sbi(TCCR2B,CS21);
  d4:	e1 eb       	ldi	r30, 0xB1	; 177
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	 //direction pins as output
	 sbi(DDRC,R_motor_direc_pin);
  de:	3c 9a       	sbi	0x07, 4	; 7
	 sbi(DDRC,L_motor_direc_pin);
  e0:	3d 9a       	sbi	0x07, 5	; 7
  e2:	08 95       	ret

000000e4 <Start_PWM_T2>:
	 
	 
 }
 void Start_PWM_T2(Motors motor,uint8_t speed)
 {
	 switch(motor)
  e4:	88 23       	and	r24, r24
  e6:	19 f0       	breq	.+6      	; 0xee <Start_PWM_T2+0xa>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	81 f5       	brne	.+96     	; 0x14c <Start_PWM_T2+0x68>
  ec:	18 c0       	rjmp	.+48     	; 0x11e <Start_PWM_T2+0x3a>
	 {
		 case(R_motor):
		 {
			 if(speed>=100)
  ee:	64 36       	cpi	r22, 0x64	; 100
  f0:	20 f0       	brcs	.+8      	; 0xfa <Start_PWM_T2+0x16>
				OCR2A=255;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	80 93 b3 00 	sts	0x00B3, r24
  f8:	08 95       	ret
			 else
				OCR2A=ceil(2.55*speed);
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatsisf>
 104:	23 e3       	ldi	r18, 0x33	; 51
 106:	33 e3       	ldi	r19, 0x33	; 51
 108:	43 e2       	ldi	r20, 0x23	; 35
 10a:	50 e4       	ldi	r21, 0x40	; 64
 10c:	0e 94 61 07 	call	0xec2	; 0xec2 <__mulsf3>
 110:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 114:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
 118:	60 93 b3 00 	sts	0x00B3, r22
 11c:	08 95       	ret
			 break;
		 }
		 case(L_motor):
		 {
			 if(speed>=100)
 11e:	64 36       	cpi	r22, 0x64	; 100
 120:	20 f0       	brcs	.+8      	; 0x12a <Start_PWM_T2+0x46>
				OCR2B=255;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	80 93 b4 00 	sts	0x00B4, r24
 128:	08 95       	ret
			 else
				OCR2B=ceil(2.55*speed);
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatsisf>
 134:	23 e3       	ldi	r18, 0x33	; 51
 136:	33 e3       	ldi	r19, 0x33	; 51
 138:	43 e2       	ldi	r20, 0x23	; 35
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	0e 94 61 07 	call	0xec2	; 0xec2 <__mulsf3>
 140:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 144:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
 148:	60 93 b4 00 	sts	0x00B4, r22
 14c:	08 95       	ret

0000014e <Steer_car>:
		 }
	 }
 }
void Steer_car(Directions dir)
{
	switch(dir)
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	d9 f1       	breq	.+118    	; 0x1c8 <Steer_car+0x7a>
 152:	20 f4       	brcc	.+8      	; 0x15c <Steer_car+0xe>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	d1 f0       	breq	.+52     	; 0x18c <Steer_car+0x3e>
 158:	40 f5       	brcc	.+80     	; 0x1aa <Steer_car+0x5c>
 15a:	09 c0       	rjmp	.+18     	; 0x16e <Steer_car+0x20>
 15c:	85 30       	cpi	r24, 0x05	; 5
 15e:	09 f4       	brne	.+2      	; 0x162 <Steer_car+0x14>
 160:	51 c0       	rjmp	.+162    	; 0x204 <Steer_car+0xb6>
 162:	08 f4       	brcc	.+2      	; 0x166 <Steer_car+0x18>
 164:	40 c0       	rjmp	.+128    	; 0x1e6 <Steer_car+0x98>
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	09 f0       	breq	.+2      	; 0x16c <Steer_car+0x1e>
 16a:	69 c0       	rjmp	.+210    	; 0x23e <Steer_car+0xf0>
 16c:	5a c0       	rjmp	.+180    	; 0x222 <Steer_car+0xd4>
	{
		case forward:
		{
			cbi(PORTC,R_motor_direc_pin);
 16e:	44 98       	cbi	0x08, 4	; 8
			cbi(PORTC,L_motor_direc_pin);
 170:	45 98       	cbi	0x08, 5	; 8
			Start_PWM50Hz_T1(1,90);
 172:	6a e5       	ldi	r22, 0x5A	; 90
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(R_motor,100);
 17a:	64 e6       	ldi	r22, 0x64	; 100
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM_T2(L_motor,100);
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 18a:	08 95       	ret
		}
		case backward:
		{
			sbi(PORTC,R_motor_direc_pin);
 18c:	44 9a       	sbi	0x08, 4	; 8
			sbi(PORTC,L_motor_direc_pin);
 18e:	45 9a       	sbi	0x08, 5	; 8
			Start_PWM50Hz_T1(1,90);
 190:	6a e5       	ldi	r22, 0x5A	; 90
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(R_motor,100);
 198:	64 e6       	ldi	r22, 0x64	; 100
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM_T2(L_motor,100);
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 1a8:	08 95       	ret
		}
		case f_right:
		{
			cbi(PORTC,R_motor_direc_pin);
 1aa:	44 98       	cbi	0x08, 4	; 8
			cbi(PORTC,L_motor_direc_pin);
 1ac:	45 98       	cbi	0x08, 5	; 8
			Start_PWM_T2(R_motor,100);
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM50Hz_T1(1,65);
 1b6:	61 e4       	ldi	r22, 0x41	; 65
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(L_motor,40);
 1be:	68 e2       	ldi	r22, 0x28	; 40
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 1c6:	08 95       	ret
		}
		case f_left:
		{
			cbi(PORTC,R_motor_direc_pin);
 1c8:	44 98       	cbi	0x08, 4	; 8
			cbi(PORTC,L_motor_direc_pin);
 1ca:	45 98       	cbi	0x08, 5	; 8
			Start_PWM_T2(R_motor,40);
 1cc:	68 e2       	ldi	r22, 0x28	; 40
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM50Hz_T1(1,120);
 1d4:	68 e7       	ldi	r22, 0x78	; 120
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(L_motor,100);
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 1e4:	08 95       	ret
		}
		case b_right:
		{
			sbi(PORTC,R_motor_direc_pin);
 1e6:	44 9a       	sbi	0x08, 4	; 8
			sbi(PORTC,L_motor_direc_pin);
 1e8:	45 9a       	sbi	0x08, 5	; 8
			Start_PWM_T2(R_motor,40);
 1ea:	68 e2       	ldi	r22, 0x28	; 40
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM50Hz_T1(1,65);
 1f2:	61 e4       	ldi	r22, 0x41	; 65
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(L_motor,100);
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 202:	08 95       	ret
		}
		case b_left:
		{
			sbi(PORTC,R_motor_direc_pin);
 204:	44 9a       	sbi	0x08, 4	; 8
			sbi(PORTC,L_motor_direc_pin);
 206:	45 9a       	sbi	0x08, 5	; 8
			Start_PWM_T2(R_motor,100);
 208:	64 e6       	ldi	r22, 0x64	; 100
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM50Hz_T1(1,120);
 210:	68 e7       	ldi	r22, 0x78	; 120
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(L_motor,40);
 218:	68 e2       	ldi	r22, 0x28	; 40
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			break;
 220:	08 95       	ret
		}
		case stop:
		{
			cbi(PORTC,R_motor_direc_pin);
 222:	44 98       	cbi	0x08, 4	; 8
			cbi(PORTC,L_motor_direc_pin);
 224:	45 98       	cbi	0x08, 5	; 8
			Start_PWM50Hz_T1(1,90);
 226:	6a e5       	ldi	r22, 0x5A	; 90
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 03 03 	call	0x606	; 0x606 <Start_PWM50Hz_T1>
			Start_PWM_T2(R_motor,0);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
			Start_PWM_T2(L_motor,0);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 72 00 	call	0xe4	; 0xe4 <Start_PWM_T2>
 23e:	08 95       	ret

00000240 <main>:
	//cbi(PORTC,PC5);
	//sbi(DDRB,PB0);
	//sbi(PORTB,PB0);
	//==================
	//UART Initialization:
	UART_init();
 240:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_init>
	//=====================
	//initialize the servo:
	init_PWM50Hz_T1(1);			//attach the control pin to PB1 "pin 9 on arduino"
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 c7 02 	call	0x58e	; 0x58e <init_PWM50Hz_T1>
	//initialize the dc motors:
	init_PWM_T2(1);				//attach right motor to PB3 "pin 11 on arduino"
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 48 00 	call	0x90	; 0x90 <init_PWM_T2>
	init_PWM_T2(2);				//attach left motor to PD3 "pin 3 on arduino"
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 48 00 	call	0x90	; 0x90 <init_PWM_T2>
	//=======================
	//ultrasonics:
	init_FrontSonic();
 256:	0e 94 0d 05 	call	0xa1a	; 0xa1a <init_FrontSonic>
	init_RearSonic();
 25a:	0e 94 36 05 	call	0xa6c	; 0xa6c <init_RearSonic>
	init_timer0();
 25e:	0e 94 5f 05 	call	0xabe	; 0xabe <init_timer0>
	init_ext_interrupts();		//enable ext. interrupt on pins:(PD2,PB0,PD5)
 262:	0e 94 6b 05 	call	0xad6	; 0xad6 <init_ext_interrupts>
	//=========================
	sei();						//enable global interrupts
 266:	78 94       	sei
	while (1)
	{
		switch(UART_recv)
 268:	80 91 21 01 	lds	r24, 0x0121
 26c:	82 34       	cpi	r24, 0x42	; 66
 26e:	b1 f1       	breq	.+108    	; 0x2dc <main+0x9c>
 270:	18 f4       	brcc	.+6      	; 0x278 <main+0x38>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	c9 f7       	brne	.-14     	; 0x268 <main+0x28>
 276:	05 c0       	rjmp	.+10     	; 0x282 <main+0x42>
 278:	88 34       	cpi	r24, 0x48	; 72
 27a:	81 f1       	breq	.+96     	; 0x2dc <main+0x9c>
 27c:	8a 34       	cpi	r24, 0x4A	; 74
 27e:	a1 f7       	brne	.-24     	; 0x268 <main+0x28>
 280:	2d c0       	rjmp	.+90     	; 0x2dc <main+0x9c>
		{
			case ('F'||'G'||'I'):
				sonar_front();
 282:	0e 94 2f 05 	call	0xa5e	; 0xa5e <sonar_front>
				deltaT_front=End_Reciv_front-Start_Reciv_front;
 286:	80 91 2e 01 	lds	r24, 0x012E
 28a:	90 91 2f 01 	lds	r25, 0x012F
 28e:	a0 91 30 01 	lds	r26, 0x0130
 292:	b0 91 31 01 	lds	r27, 0x0131
 296:	40 91 2a 01 	lds	r20, 0x012A
 29a:	50 91 2b 01 	lds	r21, 0x012B
 29e:	60 91 2c 01 	lds	r22, 0x012C
 2a2:	70 91 2d 01 	lds	r23, 0x012D
 2a6:	84 1b       	sub	r24, r20
 2a8:	95 0b       	sbc	r25, r21
 2aa:	a6 0b       	sbc	r26, r22
 2ac:	b7 0b       	sbc	r27, r23
 2ae:	80 93 3b 01 	sts	0x013B, r24
 2b2:	90 93 3c 01 	sts	0x013C, r25
 2b6:	a0 93 3d 01 	sts	0x013D, r26
 2ba:	b0 93 3e 01 	sts	0x013E, r27
				front_dist=front_obst(deltaT_front);
 2be:	80 91 3b 01 	lds	r24, 0x013B
 2c2:	90 91 3c 01 	lds	r25, 0x013C
 2c6:	a0 91 3d 01 	lds	r26, 0x013D
 2ca:	b0 91 3e 01 	lds	r27, 0x013E
 2ce:	0e 94 12 05 	call	0xa24	; 0xa24 <front_obst>
 2d2:	90 93 3a 01 	sts	0x013A, r25
 2d6:	80 93 39 01 	sts	0x0139, r24
				break;
 2da:	c6 cf       	rjmp	.-116    	; 0x268 <main+0x28>
			case 'B': case 'J': case 'H':
				sonar_rear();
 2dc:	0e 94 58 05 	call	0xab0	; 0xab0 <sonar_rear>
				deltaT_rear=End_Reciv_rear-Start_Reciv_rear;
 2e0:	80 91 26 01 	lds	r24, 0x0126
 2e4:	90 91 27 01 	lds	r25, 0x0127
 2e8:	a0 91 28 01 	lds	r26, 0x0128
 2ec:	b0 91 29 01 	lds	r27, 0x0129
 2f0:	40 91 22 01 	lds	r20, 0x0122
 2f4:	50 91 23 01 	lds	r21, 0x0123
 2f8:	60 91 24 01 	lds	r22, 0x0124
 2fc:	70 91 25 01 	lds	r23, 0x0125
 300:	84 1b       	sub	r24, r20
 302:	95 0b       	sbc	r25, r21
 304:	a6 0b       	sbc	r26, r22
 306:	b7 0b       	sbc	r27, r23
 308:	80 93 35 01 	sts	0x0135, r24
 30c:	90 93 36 01 	sts	0x0136, r25
 310:	a0 93 37 01 	sts	0x0137, r26
 314:	b0 93 38 01 	sts	0x0138, r27
				rear_dist=rear_obst(deltaT_rear);
 318:	80 91 35 01 	lds	r24, 0x0135
 31c:	90 91 36 01 	lds	r25, 0x0136
 320:	a0 91 37 01 	lds	r26, 0x0137
 324:	b0 91 38 01 	lds	r27, 0x0138
 328:	0e 94 3b 05 	call	0xa76	; 0xa76 <rear_obst>
 32c:	90 93 34 01 	sts	0x0134, r25
 330:	80 93 33 01 	sts	0x0133, r24
				break;				
 334:	99 cf       	rjmp	.-206    	; 0x268 <main+0x28>

00000336 <__vector_18>:
	}
	return 0;
}

ISR(USART_RX_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	UART_recv=UART_receive();
 358:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <UART_receive>
 35c:	80 93 21 01 	sts	0x0121, r24
	if(enter_Rx_interrupt==0)
 360:	80 91 00 01 	lds	r24, 0x0100
 364:	81 11       	cpse	r24, r1
 366:	7e c0       	rjmp	.+252    	; 0x464 <__vector_18+0x12e>
	{
		previous_Recv=UART_recv;
 368:	80 91 21 01 	lds	r24, 0x0121
 36c:	80 93 32 01 	sts	0x0132, r24
		enter_Rx_interrupt++;
 370:	80 91 00 01 	lds	r24, 0x0100
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 00 01 	sts	0x0100, r24
		switch(UART_recv)
 37a:	80 91 21 01 	lds	r24, 0x0121
 37e:	89 34       	cpi	r24, 0x49	; 73
 380:	d1 f1       	breq	.+116    	; 0x3f6 <__vector_18+0xc0>
 382:	68 f4       	brcc	.+26     	; 0x39e <__vector_18+0x68>
 384:	86 34       	cpi	r24, 0x46	; 70
 386:	d9 f0       	breq	.+54     	; 0x3be <__vector_18+0x88>
 388:	20 f4       	brcc	.+8      	; 0x392 <__vector_18+0x5c>
 38a:	82 34       	cpi	r24, 0x42	; 66
 38c:	09 f0       	breq	.+2      	; 0x390 <__vector_18+0x5a>
 38e:	ee c0       	rjmp	.+476    	; 0x56c <__vector_18+0x236>
 390:	24 c0       	rjmp	.+72     	; 0x3da <__vector_18+0xa4>
 392:	87 34       	cpi	r24, 0x47	; 71
 394:	f1 f1       	breq	.+124    	; 0x412 <__vector_18+0xdc>
 396:	88 34       	cpi	r24, 0x48	; 72
 398:	09 f0       	breq	.+2      	; 0x39c <__vector_18+0x66>
 39a:	e8 c0       	rjmp	.+464    	; 0x56c <__vector_18+0x236>
 39c:	55 c0       	rjmp	.+170    	; 0x448 <__vector_18+0x112>
 39e:	8c 34       	cpi	r24, 0x4C	; 76
 3a0:	c1 f1       	breq	.+112    	; 0x412 <__vector_18+0xdc>
 3a2:	20 f4       	brcc	.+8      	; 0x3ac <__vector_18+0x76>
 3a4:	8a 34       	cpi	r24, 0x4A	; 74
 3a6:	09 f0       	breq	.+2      	; 0x3aa <__vector_18+0x74>
 3a8:	e1 c0       	rjmp	.+450    	; 0x56c <__vector_18+0x236>
 3aa:	41 c0       	rjmp	.+130    	; 0x42e <__vector_18+0xf8>
 3ac:	82 35       	cpi	r24, 0x52	; 82
 3ae:	19 f1       	breq	.+70     	; 0x3f6 <__vector_18+0xc0>
 3b0:	83 35       	cpi	r24, 0x53	; 83
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_18+0x80>
 3b4:	db c0       	rjmp	.+438    	; 0x56c <__vector_18+0x236>
		{
			case 'S':
			{
				Steer_car(stop);
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
				break;
 3bc:	d7 c0       	rjmp	.+430    	; 0x56c <__vector_18+0x236>
			}
			case 'F':
			{
				if(front_dist>30)
 3be:	80 91 39 01 	lds	r24, 0x0139
 3c2:	90 91 3a 01 	lds	r25, 0x013A
 3c6:	4f 97       	sbiw	r24, 0x1f	; 31
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__vector_18+0x9c>
				{
					Steer_car(forward);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 3d0:	cd c0       	rjmp	.+410    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 3d8:	c9 c0       	rjmp	.+402    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'B':
			{
				if(rear_dist>30)
 3da:	80 91 33 01 	lds	r24, 0x0133
 3de:	90 91 34 01 	lds	r25, 0x0134
 3e2:	4f 97       	sbiw	r24, 0x1f	; 31
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__vector_18+0xb8>
				{
					Steer_car(backward);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 3ec:	bf c0       	rjmp	.+382    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 3f4:	bb c0       	rjmp	.+374    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'R': case 'I':
			{
				if (front_dist>30)
 3f6:	80 91 39 01 	lds	r24, 0x0139
 3fa:	90 91 3a 01 	lds	r25, 0x013A
 3fe:	4f 97       	sbiw	r24, 0x1f	; 31
 400:	20 f0       	brcs	.+8      	; 0x40a <__vector_18+0xd4>
				{
					Steer_car(f_right);
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 408:	b1 c0       	rjmp	.+354    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 410:	ad c0       	rjmp	.+346    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'L': case 'G':
			{
				if (front_dist>30)
 412:	80 91 39 01 	lds	r24, 0x0139
 416:	90 91 3a 01 	lds	r25, 0x013A
 41a:	4f 97       	sbiw	r24, 0x1f	; 31
 41c:	20 f0       	brcs	.+8      	; 0x426 <__vector_18+0xf0>
				{
					Steer_car(f_left);
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 424:	a3 c0       	rjmp	.+326    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 42c:	9f c0       	rjmp	.+318    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'J':
			{
				if (rear_dist>30)
 42e:	80 91 33 01 	lds	r24, 0x0133
 432:	90 91 34 01 	lds	r25, 0x0134
 436:	4f 97       	sbiw	r24, 0x1f	; 31
 438:	20 f0       	brcs	.+8      	; 0x442 <__vector_18+0x10c>
				{
					Steer_car(b_right);
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 440:	03 c0       	rjmp	.+6      	; 0x448 <__vector_18+0x112>
				}
				else
				{
					Steer_car(stop);
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
				}
			}
			case 'H':
			{
				if (rear_dist>30)
 448:	80 91 33 01 	lds	r24, 0x0133
 44c:	90 91 34 01 	lds	r25, 0x0134
 450:	4f 97       	sbiw	r24, 0x1f	; 31
 452:	20 f0       	brcs	.+8      	; 0x45c <__vector_18+0x126>
				{
					Steer_car(b_left);
 454:	85 e0       	ldi	r24, 0x05	; 5
 456:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 45a:	88 c0       	rjmp	.+272    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 462:	84 c0       	rjmp	.+264    	; 0x56c <__vector_18+0x236>
			}
			default:
			break;
		}
	}
	else if(previous_Recv==UART_recv)
 464:	90 91 32 01 	lds	r25, 0x0132
 468:	80 91 21 01 	lds	r24, 0x0121
 46c:	98 17       	cp	r25, r24
 46e:	09 f4       	brne	.+2      	; 0x472 <__vector_18+0x13c>
 470:	7d c0       	rjmp	.+250    	; 0x56c <__vector_18+0x236>
		//enter_Rx_interrupt=1;
		((void)0);
	}
	else
	{
		previous_Recv=UART_recv;
 472:	80 91 21 01 	lds	r24, 0x0121
 476:	80 93 32 01 	sts	0x0132, r24
		enter_Rx_interrupt++;
 47a:	80 91 00 01 	lds	r24, 0x0100
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 00 01 	sts	0x0100, r24
		switch(UART_recv)
 484:	80 91 21 01 	lds	r24, 0x0121
 488:	89 34       	cpi	r24, 0x49	; 73
 48a:	d1 f1       	breq	.+116    	; 0x500 <__vector_18+0x1ca>
 48c:	68 f4       	brcc	.+26     	; 0x4a8 <__vector_18+0x172>
 48e:	86 34       	cpi	r24, 0x46	; 70
 490:	d9 f0       	breq	.+54     	; 0x4c8 <__vector_18+0x192>
 492:	20 f4       	brcc	.+8      	; 0x49c <__vector_18+0x166>
 494:	82 34       	cpi	r24, 0x42	; 66
 496:	09 f0       	breq	.+2      	; 0x49a <__vector_18+0x164>
 498:	69 c0       	rjmp	.+210    	; 0x56c <__vector_18+0x236>
 49a:	24 c0       	rjmp	.+72     	; 0x4e4 <__vector_18+0x1ae>
 49c:	87 34       	cpi	r24, 0x47	; 71
 49e:	f1 f1       	breq	.+124    	; 0x51c <__vector_18+0x1e6>
 4a0:	88 34       	cpi	r24, 0x48	; 72
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__vector_18+0x170>
 4a4:	63 c0       	rjmp	.+198    	; 0x56c <__vector_18+0x236>
 4a6:	55 c0       	rjmp	.+170    	; 0x552 <__vector_18+0x21c>
 4a8:	8c 34       	cpi	r24, 0x4C	; 76
 4aa:	c1 f1       	breq	.+112    	; 0x51c <__vector_18+0x1e6>
 4ac:	20 f4       	brcc	.+8      	; 0x4b6 <__vector_18+0x180>
 4ae:	8a 34       	cpi	r24, 0x4A	; 74
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__vector_18+0x17e>
 4b2:	5c c0       	rjmp	.+184    	; 0x56c <__vector_18+0x236>
 4b4:	41 c0       	rjmp	.+130    	; 0x538 <__vector_18+0x202>
 4b6:	82 35       	cpi	r24, 0x52	; 82
 4b8:	19 f1       	breq	.+70     	; 0x500 <__vector_18+0x1ca>
 4ba:	83 35       	cpi	r24, 0x53	; 83
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__vector_18+0x18a>
 4be:	56 c0       	rjmp	.+172    	; 0x56c <__vector_18+0x236>
		{
			case 'S':
			{
				Steer_car(stop);
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
				break;
 4c6:	52 c0       	rjmp	.+164    	; 0x56c <__vector_18+0x236>
			}
			case 'F':
			{
				if(front_dist>30)
 4c8:	80 91 39 01 	lds	r24, 0x0139
 4cc:	90 91 3a 01 	lds	r25, 0x013A
 4d0:	4f 97       	sbiw	r24, 0x1f	; 31
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__vector_18+0x1a6>
				{
					Steer_car(forward);
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 4da:	48 c0       	rjmp	.+144    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 4e2:	44 c0       	rjmp	.+136    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'B':
			{
				if(rear_dist>30)
 4e4:	80 91 33 01 	lds	r24, 0x0133
 4e8:	90 91 34 01 	lds	r25, 0x0134
 4ec:	4f 97       	sbiw	r24, 0x1f	; 31
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__vector_18+0x1c2>
				{
					Steer_car(backward);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 4f6:	3a c0       	rjmp	.+116    	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 4f8:	86 e0       	ldi	r24, 0x06	; 6
 4fa:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 4fe:	36 c0       	rjmp	.+108    	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'R': case 'I':
			{
				if (front_dist>30)
 500:	80 91 39 01 	lds	r24, 0x0139
 504:	90 91 3a 01 	lds	r25, 0x013A
 508:	4f 97       	sbiw	r24, 0x1f	; 31
 50a:	20 f0       	brcs	.+8      	; 0x514 <__vector_18+0x1de>
				{
					Steer_car(f_right);
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 512:	2c c0       	rjmp	.+88     	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 51a:	28 c0       	rjmp	.+80     	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'L': case 'G':
			{
				if (front_dist>30)
 51c:	80 91 39 01 	lds	r24, 0x0139
 520:	90 91 3a 01 	lds	r25, 0x013A
 524:	4f 97       	sbiw	r24, 0x1f	; 31
 526:	20 f0       	brcs	.+8      	; 0x530 <__vector_18+0x1fa>
				{
					Steer_car(f_left);
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 52e:	1e c0       	rjmp	.+60     	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 536:	1a c0       	rjmp	.+52     	; 0x56c <__vector_18+0x236>
				}
				break;
			}
			case 'J':
			{
				if (rear_dist>30)
 538:	80 91 33 01 	lds	r24, 0x0133
 53c:	90 91 34 01 	lds	r25, 0x0134
 540:	4f 97       	sbiw	r24, 0x1f	; 31
 542:	20 f0       	brcs	.+8      	; 0x54c <__vector_18+0x216>
				{
					Steer_car(b_right);
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 54a:	03 c0       	rjmp	.+6      	; 0x552 <__vector_18+0x21c>
				}
				else
				{
					Steer_car(stop);
 54c:	86 e0       	ldi	r24, 0x06	; 6
 54e:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
				}
			}
			case 'H':
			{
				if (rear_dist>30)
 552:	80 91 33 01 	lds	r24, 0x0133
 556:	90 91 34 01 	lds	r25, 0x0134
 55a:	4f 97       	sbiw	r24, 0x1f	; 31
 55c:	20 f0       	brcs	.+8      	; 0x566 <__vector_18+0x230>
				{
					Steer_car(b_left);
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
 564:	03 c0       	rjmp	.+6      	; 0x56c <__vector_18+0x236>
				}
				else
				{
					Steer_car(stop);
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	0e 94 a7 00 	call	0x14e	; 0x14e <Steer_car>
			}
			default:
			break;
		}
	}
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <init_PWM50Hz_T1>:
 *  Author: user
 */
#include "Motors.h" 
void init_PWM50Hz_T1(uint8_t pin)
{
	switch(pin)
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	19 f0       	breq	.+6      	; 0x598 <init_PWM50Hz_T1+0xa>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	b1 f4       	brne	.+44     	; 0x5c2 <init_PWM50Hz_T1+0x34>
 596:	0b c0       	rjmp	.+22     	; 0x5ae <init_PWM50Hz_T1+0x20>
	{
		case(1):
		{
			//set OC1A Or OC1B FOR generating PWM
			sbi(DDRB,PB1);
 598:	21 9a       	sbi	0x04, 1	; 4
			cbi(PORTB,PB1);
 59a:	29 98       	cbi	0x05, 1	; 5
			//OCReg=&(OCR1A);
			// inverting mode : to control on servo motion @ last 2ms in period
			sbi(TCCR1A,COM1A0);
 59c:	e0 e8       	ldi	r30, 0x80	; 128
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	80 64       	ori	r24, 0x40	; 64
 5a4:	80 83       	st	Z, r24
			sbi(TCCR1A,COM1A1);
 5a6:	80 81       	ld	r24, Z
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	80 83       	st	Z, r24
			break;
 5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <init_PWM50Hz_T1+0x34>
		}
		case(2):
		{
			//set OC1A Or OC1B FOR generating PWM
			sbi(DDRB,PB2);
 5ae:	22 9a       	sbi	0x04, 2	; 4
			cbi(PORTB,PB2);
 5b0:	2a 98       	cbi	0x05, 2	; 5
			//OCReg=&OCR1B;
			// inverting mode : to control on servo motion @ last 2ms in period
			sbi(TCCR1A,COM1B0);
 5b2:	e0 e8       	ldi	r30, 0x80	; 128
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	80 61       	ori	r24, 0x10	; 16
 5ba:	80 83       	st	Z, r24
			sbi(TCCR1A,COM1B1);
 5bc:	80 81       	ld	r24, Z
 5be:	80 62       	ori	r24, 0x20	; 32
 5c0:	80 83       	st	Z, r24
		}
	}

	//SELECT MODE:
	//fast PWM: (with top = ICR1 & update its value @ BOTTOM , TOV flag set on TOP)
	sbi(TCCR1A,WGM11);
 5c2:	e0 e8       	ldi	r30, 0x80	; 128
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	80 83       	st	Z, r24
	cbi(TCCR1A,WGM10);
 5cc:	80 81       	ld	r24, Z
 5ce:	8e 7f       	andi	r24, 0xFE	; 254
 5d0:	80 83       	st	Z, r24
	sbi(TCCR1B,WGM13);
 5d2:	e1 e8       	ldi	r30, 0x81	; 129
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	80 61       	ori	r24, 0x10	; 16
 5da:	80 83       	st	Z, r24
	sbi(TCCR1B,WGM12);
 5dc:	80 81       	ld	r24, Z
 5de:	88 60       	ori	r24, 0x08	; 8
 5e0:	80 83       	st	Z, r24
	//PRECALING (8):(to have 40000 cycle per second which means that every ms has 4000 cycles)
	sbi(TCCR1B,CS11);
 5e2:	80 81       	ld	r24, Z
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	80 83       	st	Z, r24
	//setting top value equal 39999 @which starting a new clock
	ICR1=39999;
 5e8:	8f e3       	ldi	r24, 0x3F	; 63
 5ea:	9c e9       	ldi	r25, 0x9C	; 156
 5ec:	90 93 87 00 	sts	0x0087, r25
 5f0:	80 93 86 00 	sts	0x0086, r24
	OCR1A=39999;	//initially duty cycle is zero
 5f4:	90 93 89 00 	sts	0x0089, r25
 5f8:	80 93 88 00 	sts	0x0088, r24
	OCR1B=39999;
 5fc:	90 93 8b 00 	sts	0x008B, r25
 600:	80 93 8a 00 	sts	0x008A, r24
 604:	08 95       	ret

00000606 <Start_PWM50Hz_T1>:
}
void Start_PWM50Hz_T1(uint8_t pin,uint8_t deg)
{
 606:	cf 92       	push	r12
 608:	df 92       	push	r13
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
	switch(pin)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	21 f0       	breq	.+8      	; 0x61e <Start_PWM50Hz_T1+0x18>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	09 f0       	breq	.+2      	; 0x61c <Start_PWM50Hz_T1+0x16>
 61a:	4a c0       	rjmp	.+148    	; 0x6b0 <Start_PWM50Hz_T1+0xaa>
 61c:	25 c0       	rjmp	.+74     	; 0x668 <Start_PWM50Hz_T1+0x62>
	{
		case(1):
		{
			OCR1A=(ICR1-2000)-ceil(((Max_Deg-Min_Deg)/180)*(float)deg);
 61e:	c0 91 86 00 	lds	r28, 0x0086
 622:	d0 91 87 00 	lds	r29, 0x0087
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	40 e3       	ldi	r20, 0x30	; 48
 636:	51 e4       	ldi	r21, 0x41	; 65
 638:	0e 94 61 07 	call	0xec2	; 0xec2 <__mulsf3>
 63c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 640:	6b 01       	movw	r12, r22
 642:	7c 01       	movw	r14, r24
 644:	be 01       	movw	r22, r28
 646:	60 5d       	subi	r22, 0xD0	; 208
 648:	77 40       	sbci	r23, 0x07	; 7
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 652:	a7 01       	movw	r20, r14
 654:	96 01       	movw	r18, r12
 656:	0e 94 87 05 	call	0xb0e	; 0xb0e <__subsf3>
 65a:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
 65e:	70 93 89 00 	sts	0x0089, r23
 662:	60 93 88 00 	sts	0x0088, r22
			break;
 666:	24 c0       	rjmp	.+72     	; 0x6b0 <Start_PWM50Hz_T1+0xaa>
		}
		case(2):
		{
			OCR1B=(ICR1-2000)-ceil(((Max_Deg-Min_Deg)/180)*(float)deg);
 668:	c0 91 86 00 	lds	r28, 0x0086
 66c:	d0 91 87 00 	lds	r29, 0x0087
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 e3       	ldi	r20, 0x30	; 48
 680:	51 e4       	ldi	r21, 0x41	; 65
 682:	0e 94 61 07 	call	0xec2	; 0xec2 <__mulsf3>
 686:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 68a:	6b 01       	movw	r12, r22
 68c:	7c 01       	movw	r14, r24
 68e:	be 01       	movw	r22, r28
 690:	60 5d       	subi	r22, 0xD0	; 208
 692:	77 40       	sbci	r23, 0x07	; 7
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 69c:	a7 01       	movw	r20, r14
 69e:	96 01       	movw	r18, r12
 6a0:	0e 94 87 05 	call	0xb0e	; 0xb0e <__subsf3>
 6a4:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
 6a8:	70 93 8b 00 	sts	0x008B, r23
 6ac:	60 93 8a 00 	sts	0x008A, r22
			break;
		}
	}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	df 90       	pop	r13
 6ba:	cf 90       	pop	r12
 6bc:	08 95       	ret

000006be <UART_init>:


//UART==================
void UART_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 6be:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 6c2:	87 e6       	ldi	r24, 0x67	; 103
 6c4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 6c8:	88 e9       	ldi	r24, 0x98	; 152
 6ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);
 6ce:	86 e0       	ldi	r24, 0x06	; 6
 6d0:	80 93 c2 00 	sts	0x00C2, r24
 6d4:	08 95       	ret

000006d6 <UART_receive>:
}

unsigned char UART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 6d6:	e0 ec       	ldi	r30, 0xC0	; 192
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	88 23       	and	r24, r24
 6de:	ec f7       	brge	.-6      	; 0x6da <UART_receive+0x4>
	return UDR0;
 6e0:	80 91 c6 00 	lds	r24, 0x00C6
	
}
 6e4:	08 95       	ret

000006e6 <__vector_16>:

#include "ultrasonic.h"

//UltraSonics'INTERRUPTS:=====================>
ISR(TIMER0_OVF_vect)
{
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	af 93       	push	r26
 6f6:	bf 93       	push	r27
	//Get Here Every 1ms
	/*USAGE:
	1.Used in measuring the time of being the echo pin high
	
	*/
	OVF_Counter_front++;				//To know The number of overflow times
 6f8:	80 91 1d 01 	lds	r24, 0x011D
 6fc:	90 91 1e 01 	lds	r25, 0x011E
 700:	a0 91 1f 01 	lds	r26, 0x011F
 704:	b0 91 20 01 	lds	r27, 0x0120
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	a1 1d       	adc	r26, r1
 70c:	b1 1d       	adc	r27, r1
 70e:	80 93 1d 01 	sts	0x011D, r24
 712:	90 93 1e 01 	sts	0x011E, r25
 716:	a0 93 1f 01 	sts	0x011F, r26
 71a:	b0 93 20 01 	sts	0x0120, r27
	OVF_Counter_rear++;				//To know The number of overflow times
 71e:	80 91 0d 01 	lds	r24, 0x010D
 722:	90 91 0e 01 	lds	r25, 0x010E
 726:	a0 91 0f 01 	lds	r26, 0x010F
 72a:	b0 91 10 01 	lds	r27, 0x0110
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	a1 1d       	adc	r26, r1
 732:	b1 1d       	adc	r27, r1
 734:	80 93 0d 01 	sts	0x010D, r24
 738:	90 93 0e 01 	sts	0x010E, r25
 73c:	a0 93 0f 01 	sts	0x010F, r26
 740:	b0 93 10 01 	sts	0x0110, r27
}
 744:	bf 91       	pop	r27
 746:	af 91       	pop	r26
 748:	9f 91       	pop	r25
 74a:	8f 91       	pop	r24
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_3>:
ISR(PCINT0_vect)					//get here when logical change occurred on front echo pin PB0
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	8f 92       	push	r8
 762:	9f 92       	push	r9
 764:	af 92       	push	r10
 766:	bf 92       	push	r11
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	2f 93       	push	r18
 772:	3f 93       	push	r19
 774:	4f 93       	push	r20
 776:	5f 93       	push	r21
 778:	6f 93       	push	r22
 77a:	7f 93       	push	r23
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
 780:	af 93       	push	r26
 782:	bf 93       	push	r27
	switch(state_front)
 784:	80 91 13 01 	lds	r24, 0x0113
 788:	90 91 14 01 	lds	r25, 0x0114
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	21 f0       	breq	.+8      	; 0x798 <__vector_3+0x42>
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	09 f0       	breq	.+2      	; 0x796 <__vector_3+0x40>
 794:	7a c0       	rjmp	.+244    	; 0x88a <__vector_3+0x134>
 796:	33 c0       	rjmp	.+102    	; 0x7fe <__vector_3+0xa8>
	{
		case 0:
		{
			state_front=1;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	90 93 14 01 	sts	0x0114, r25
 7a0:	80 93 13 01 	sts	0x0113, r24
			frontTCNT1=TCNT0;
 7a4:	86 b5       	in	r24, 0x26	; 38
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a0 e0       	ldi	r26, 0x00	; 0
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	80 93 19 01 	sts	0x0119, r24
 7b0:	90 93 1a 01 	sts	0x011A, r25
 7b4:	a0 93 1b 01 	sts	0x011B, r26
 7b8:	b0 93 1c 01 	sts	0x011C, r27
			Start_Reciv_front=(OVF_Counter_front*255)+frontTCNT1;
 7bc:	20 91 1d 01 	lds	r18, 0x011D
 7c0:	30 91 1e 01 	lds	r19, 0x011E
 7c4:	40 91 1f 01 	lds	r20, 0x011F
 7c8:	50 91 20 01 	lds	r21, 0x0120
 7cc:	c0 90 19 01 	lds	r12, 0x0119
 7d0:	d0 90 1a 01 	lds	r13, 0x011A
 7d4:	e0 90 1b 01 	lds	r14, 0x011B
 7d8:	f0 90 1c 01 	lds	r15, 0x011C
 7dc:	af ef       	ldi	r26, 0xFF	; 255
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	0e 94 c4 07 	call	0xf88	; 0xf88 <__muluhisi3>
 7e4:	c6 0e       	add	r12, r22
 7e6:	d7 1e       	adc	r13, r23
 7e8:	e8 1e       	adc	r14, r24
 7ea:	f9 1e       	adc	r15, r25
 7ec:	c0 92 2a 01 	sts	0x012A, r12
 7f0:	d0 92 2b 01 	sts	0x012B, r13
 7f4:	e0 92 2c 01 	sts	0x012C, r14
 7f8:	f0 92 2d 01 	sts	0x012D, r15
			break;
 7fc:	46 c0       	rjmp	.+140    	; 0x88a <__vector_3+0x134>
		}
		case 1:
		{
			state_front=0;
 7fe:	10 92 14 01 	sts	0x0114, r1
 802:	10 92 13 01 	sts	0x0113, r1
			
			frontTCNT2=TCNT0;
 806:	86 b5       	in	r24, 0x26	; 38
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	a0 e0       	ldi	r26, 0x00	; 0
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	80 93 15 01 	sts	0x0115, r24
 812:	90 93 16 01 	sts	0x0116, r25
 816:	a0 93 17 01 	sts	0x0117, r26
 81a:	b0 93 18 01 	sts	0x0118, r27
			End_Reciv_front=(OVF_Counter_front*255)+(frontTCNT2-frontTCNT1);
 81e:	20 91 1d 01 	lds	r18, 0x011D
 822:	30 91 1e 01 	lds	r19, 0x011E
 826:	40 91 1f 01 	lds	r20, 0x011F
 82a:	50 91 20 01 	lds	r21, 0x0120
 82e:	c0 90 15 01 	lds	r12, 0x0115
 832:	d0 90 16 01 	lds	r13, 0x0116
 836:	e0 90 17 01 	lds	r14, 0x0117
 83a:	f0 90 18 01 	lds	r15, 0x0118
 83e:	80 90 19 01 	lds	r8, 0x0119
 842:	90 90 1a 01 	lds	r9, 0x011A
 846:	a0 90 1b 01 	lds	r10, 0x011B
 84a:	b0 90 1c 01 	lds	r11, 0x011C
 84e:	af ef       	ldi	r26, 0xFF	; 255
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	0e 94 c4 07 	call	0xf88	; 0xf88 <__muluhisi3>
 856:	dc 01       	movw	r26, r24
 858:	cb 01       	movw	r24, r22
 85a:	88 19       	sub	r24, r8
 85c:	99 09       	sbc	r25, r9
 85e:	aa 09       	sbc	r26, r10
 860:	bb 09       	sbc	r27, r11
 862:	c8 0e       	add	r12, r24
 864:	d9 1e       	adc	r13, r25
 866:	ea 1e       	adc	r14, r26
 868:	fb 1e       	adc	r15, r27
 86a:	c0 92 2e 01 	sts	0x012E, r12
 86e:	d0 92 2f 01 	sts	0x012F, r13
 872:	e0 92 30 01 	sts	0x0130, r14
 876:	f0 92 31 01 	sts	0x0131, r15
			OVF_Counter_front=0;
 87a:	10 92 1d 01 	sts	0x011D, r1
 87e:	10 92 1e 01 	sts	0x011E, r1
 882:	10 92 1f 01 	sts	0x011F, r1
 886:	10 92 20 01 	sts	0x0120, r1
			break;
		}
		default:
			break;
	}
}
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	9f 90       	pop	r9
 8ac:	8f 90       	pop	r8
 8ae:	0f 90       	pop	r0
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	0f 90       	pop	r0
 8b4:	1f 90       	pop	r1
 8b6:	18 95       	reti

000008b8 <__vector_5>:

ISR(PCINT2_vect)				//get here when logical change on the rear echo pin PD5 
{
 8b8:	1f 92       	push	r1
 8ba:	0f 92       	push	r0
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	0f 92       	push	r0
 8c0:	11 24       	eor	r1, r1
 8c2:	8f 92       	push	r8
 8c4:	9f 92       	push	r9
 8c6:	af 92       	push	r10
 8c8:	bf 92       	push	r11
 8ca:	cf 92       	push	r12
 8cc:	df 92       	push	r13
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
	switch(state_rear)
 8e6:	80 91 03 01 	lds	r24, 0x0103
 8ea:	90 91 04 01 	lds	r25, 0x0104
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	21 f0       	breq	.+8      	; 0x8fa <__vector_5+0x42>
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_5+0x40>
 8f6:	7a c0       	rjmp	.+244    	; 0x9ec <__stack+0xed>
 8f8:	33 c0       	rjmp	.+102    	; 0x960 <__stack+0x61>
	{
		case 0:
		{
			state_rear=1;
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	90 93 04 01 	sts	0x0104, r25
 902:	80 93 03 01 	sts	0x0103, r24
			rearTCNT1=TCNT0;
 906:	86 b5       	in	r24, 0x26	; 38
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	a0 e0       	ldi	r26, 0x00	; 0
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	80 93 09 01 	sts	0x0109, r24
 912:	90 93 0a 01 	sts	0x010A, r25
 916:	a0 93 0b 01 	sts	0x010B, r26
 91a:	b0 93 0c 01 	sts	0x010C, r27
			Start_Reciv_rear=(OVF_Counter_rear*255)+rearTCNT1;
 91e:	20 91 0d 01 	lds	r18, 0x010D
 922:	30 91 0e 01 	lds	r19, 0x010E
 926:	40 91 0f 01 	lds	r20, 0x010F
 92a:	50 91 10 01 	lds	r21, 0x0110
 92e:	c0 90 09 01 	lds	r12, 0x0109
 932:	d0 90 0a 01 	lds	r13, 0x010A
 936:	e0 90 0b 01 	lds	r14, 0x010B
 93a:	f0 90 0c 01 	lds	r15, 0x010C
 93e:	af ef       	ldi	r26, 0xFF	; 255
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	0e 94 c4 07 	call	0xf88	; 0xf88 <__muluhisi3>
 946:	c6 0e       	add	r12, r22
 948:	d7 1e       	adc	r13, r23
 94a:	e8 1e       	adc	r14, r24
 94c:	f9 1e       	adc	r15, r25
 94e:	c0 92 22 01 	sts	0x0122, r12
 952:	d0 92 23 01 	sts	0x0123, r13
 956:	e0 92 24 01 	sts	0x0124, r14
 95a:	f0 92 25 01 	sts	0x0125, r15
			break;
 95e:	46 c0       	rjmp	.+140    	; 0x9ec <__stack+0xed>
		}
		case 1:
		{
			state_rear=0;
 960:	10 92 04 01 	sts	0x0104, r1
 964:	10 92 03 01 	sts	0x0103, r1
			rearTCNT2=TCNT0;
 968:	86 b5       	in	r24, 0x26	; 38
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	a0 e0       	ldi	r26, 0x00	; 0
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	80 93 05 01 	sts	0x0105, r24
 974:	90 93 06 01 	sts	0x0106, r25
 978:	a0 93 07 01 	sts	0x0107, r26
 97c:	b0 93 08 01 	sts	0x0108, r27
			End_Reciv_rear=(OVF_Counter_rear*255)+(rearTCNT2-rearTCNT1);
 980:	20 91 0d 01 	lds	r18, 0x010D
 984:	30 91 0e 01 	lds	r19, 0x010E
 988:	40 91 0f 01 	lds	r20, 0x010F
 98c:	50 91 10 01 	lds	r21, 0x0110
 990:	c0 90 05 01 	lds	r12, 0x0105
 994:	d0 90 06 01 	lds	r13, 0x0106
 998:	e0 90 07 01 	lds	r14, 0x0107
 99c:	f0 90 08 01 	lds	r15, 0x0108
 9a0:	80 90 09 01 	lds	r8, 0x0109
 9a4:	90 90 0a 01 	lds	r9, 0x010A
 9a8:	a0 90 0b 01 	lds	r10, 0x010B
 9ac:	b0 90 0c 01 	lds	r11, 0x010C
 9b0:	af ef       	ldi	r26, 0xFF	; 255
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	0e 94 c4 07 	call	0xf88	; 0xf88 <__muluhisi3>
 9b8:	dc 01       	movw	r26, r24
 9ba:	cb 01       	movw	r24, r22
 9bc:	88 19       	sub	r24, r8
 9be:	99 09       	sbc	r25, r9
 9c0:	aa 09       	sbc	r26, r10
 9c2:	bb 09       	sbc	r27, r11
 9c4:	c8 0e       	add	r12, r24
 9c6:	d9 1e       	adc	r13, r25
 9c8:	ea 1e       	adc	r14, r26
 9ca:	fb 1e       	adc	r15, r27
 9cc:	c0 92 26 01 	sts	0x0126, r12
 9d0:	d0 92 27 01 	sts	0x0127, r13
 9d4:	e0 92 28 01 	sts	0x0128, r14
 9d8:	f0 92 29 01 	sts	0x0129, r15
			OVF_Counter_rear=0;
 9dc:	10 92 0d 01 	sts	0x010D, r1
 9e0:	10 92 0e 01 	sts	0x010E, r1
 9e4:	10 92 0f 01 	sts	0x010F, r1
 9e8:	10 92 10 01 	sts	0x0110, r1
			break;
		}
		default:
		break;
	}
}
 9ec:	bf 91       	pop	r27
 9ee:	af 91       	pop	r26
 9f0:	9f 91       	pop	r25
 9f2:	8f 91       	pop	r24
 9f4:	7f 91       	pop	r23
 9f6:	6f 91       	pop	r22
 9f8:	5f 91       	pop	r21
 9fa:	4f 91       	pop	r20
 9fc:	3f 91       	pop	r19
 9fe:	2f 91       	pop	r18
 a00:	ff 90       	pop	r15
 a02:	ef 90       	pop	r14
 a04:	df 90       	pop	r13
 a06:	cf 90       	pop	r12
 a08:	bf 90       	pop	r11
 a0a:	af 90       	pop	r10
 a0c:	9f 90       	pop	r9
 a0e:	8f 90       	pop	r8
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <init_FrontSonic>:
//=====================================<
//Front Sonic Functions:===============>
void init_FrontSonic()
{
	sbi(DDR_front_trig,trig_pin_front);
 a1a:	57 9a       	sbi	0x0a, 7	; 10
	cbi(PORT_front_trig,trig_pin_front);
 a1c:	5f 98       	cbi	0x0b, 7	; 11
	cbi(DDR_front_echo,echo_pin_front);
 a1e:	20 98       	cbi	0x04, 0	; 4
	cbi(PORT_front_echo,echo_pin_front);
 a20:	28 98       	cbi	0x05, 0	; 5
 a22:	08 95       	ret

00000a24 <front_obst>:
}
uint16_t front_obst(uint16_t DeltaT)
{
	uint16_t Dist=0;
	echo_Time_front=(DeltaT*4);				//(the difference between the beginning of the echo pulse and the end of it) multiplied by 4 microseconds
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	90 93 12 01 	sts	0x0112, r25
 a30:	80 93 11 01 	sts	0x0111, r24
	Dist=ceil(echo_Time_front/58.0);
 a34:	60 91 11 01 	lds	r22, 0x0111
 a38:	70 91 12 01 	lds	r23, 0x0112
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 a44:	20 e0       	ldi	r18, 0x00	; 0
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	48 e6       	ldi	r20, 0x68	; 104
 a4a:	52 e4       	ldi	r21, 0x42	; 66
 a4c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
 a50:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 a54:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
	return Dist;
}
 a58:	86 2f       	mov	r24, r22
 a5a:	97 2f       	mov	r25, r23
 a5c:	08 95       	ret

00000a5e <sonar_front>:
void sonar_front()
{
	sbi(PORT_front_trig,trig_pin_front);
 a5e:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a60:	8a e2       	ldi	r24, 0x2A	; 42
 a62:	8a 95       	dec	r24
 a64:	f1 f7       	brne	.-4      	; 0xa62 <sonar_front+0x4>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <sonar_front+0xa>
	_delay_us(8);
	cbi(PORT_front_trig,trig_pin_front);
 a68:	5f 98       	cbi	0x0b, 7	; 11
 a6a:	08 95       	ret

00000a6c <init_RearSonic>:
}
//==============================================<
//Rear Sonic Functions:=========================>
void init_RearSonic()
{
	sbi(DDR_rear_sonic,trig_pin_rear);				//Output
 a6c:	56 9a       	sbi	0x0a, 6	; 10
	cbi(PORT_rear_sonic,trig_pin_rear);				//initially b zero
 a6e:	5e 98       	cbi	0x0b, 6	; 11
	cbi(DDR_rear_sonic,echo_pin_rear);				//input
 a70:	55 98       	cbi	0x0a, 5	; 10
	cbi(PORT_rear_sonic,echo_pin_rear);
 a72:	5d 98       	cbi	0x0b, 5	; 11
 a74:	08 95       	ret

00000a76 <rear_obst>:
}
uint16_t rear_obst(uint16_t DeltaT)
{
	uint16_t Dist=0;
	echo_Time_rear=(DeltaT*4);				//(the difference between the beginning of the echo pulse and the end of it) multiplied by 4 microseconds
 a76:	88 0f       	add	r24, r24
 a78:	99 1f       	adc	r25, r25
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	90 93 02 01 	sts	0x0102, r25
 a82:	80 93 01 01 	sts	0x0101, r24
	Dist=ceil(echo_Time_rear/58.0);		//time duration * 0.017
 a86:	60 91 01 01 	lds	r22, 0x0101
 a8a:	70 91 02 01 	lds	r23, 0x0102
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 93 06 	call	0xd26	; 0xd26 <__floatunsisf>
 a96:	20 e0       	ldi	r18, 0x00	; 0
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	48 e6       	ldi	r20, 0x68	; 104
 a9c:	52 e4       	ldi	r21, 0x42	; 66
 a9e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
 aa2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ceil>
 aa6:	0e 94 67 06 	call	0xcce	; 0xcce <__fixunssfsi>
	return Dist;
}
 aaa:	86 2f       	mov	r24, r22
 aac:	97 2f       	mov	r25, r23
 aae:	08 95       	ret

00000ab0 <sonar_rear>:
void sonar_rear()
{
	sbi(PORT_rear_sonic,trig_pin_rear);
 ab0:	5e 9a       	sbi	0x0b, 6	; 11
 ab2:	8a e2       	ldi	r24, 0x2A	; 42
 ab4:	8a 95       	dec	r24
 ab6:	f1 f7       	brne	.-4      	; 0xab4 <sonar_rear+0x4>
 ab8:	00 c0       	rjmp	.+0      	; 0xaba <sonar_rear+0xa>
	_delay_us(8);
	cbi(PORT_rear_sonic,trig_pin_rear);
 aba:	5e 98       	cbi	0x0b, 6	; 11
 abc:	08 95       	ret

00000abe <init_timer0>:
}
//==================================================<
void init_timer0()
{
	//Initialize Timer0 with Normal mode and its tick 'll be occurred every 4 micro seconds
	sbi(TCCR0B,CS00); 		//PREscaler 64
 abe:	85 b5       	in	r24, 0x25	; 37
 ac0:	81 60       	ori	r24, 0x01	; 1
 ac2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);
 ac4:	85 b5       	in	r24, 0x25	; 37
 ac6:	82 60       	ori	r24, 0x02	; 2
 ac8:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0,TOIE0);		//enable overflow interrupt
 aca:	ee e6       	ldi	r30, 0x6E	; 110
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	80 81       	ld	r24, Z
 ad0:	81 60       	ori	r24, 0x01	; 1
 ad2:	80 83       	st	Z, r24
 ad4:	08 95       	ret

00000ad6 <init_ext_interrupts>:
}
void init_ext_interrupts()
{
	sbi(EICRA,ISC00);			//set trigger INT0 for Logical change mode
 ad6:	e9 e6       	ldi	r30, 0x69	; 105
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	81 60       	ori	r24, 0x01	; 1
 ade:	80 83       	st	Z, r24
	sbi(EICRA,ISC01);
 ae0:	80 81       	ld	r24, Z
 ae2:	82 60       	ori	r24, 0x02	; 2
 ae4:	80 83       	st	Z, r24
	sbi(EIMSK,INT0);			//turn on INT0
 ae6:	e8 9a       	sbi	0x1d, 0	; 29
	sbi(PCICR,PCIE0);			//enable interrupt on pin change for pins{0:7}
 ae8:	e8 e6       	ldi	r30, 0x68	; 104
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	81 60       	ori	r24, 0x01	; 1
 af0:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);			//choose pin PB0 for trigger the interrupt
 af2:	ab e6       	ldi	r26, 0x6B	; 107
 af4:	b0 e0       	ldi	r27, 0x00	; 0
 af6:	8c 91       	ld	r24, X
 af8:	81 60       	ori	r24, 0x01	; 1
 afa:	8c 93       	st	X, r24
	sbi(PCICR,PCIE2);			//enable interrupt on pin change for pins{16:23}
 afc:	80 81       	ld	r24, Z
 afe:	84 60       	ori	r24, 0x04	; 4
 b00:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT21);		//choose pin PD7 for trigger the interrupt
 b02:	ed e6       	ldi	r30, 0x6D	; 109
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	80 62       	ori	r24, 0x20	; 32
 b0a:	80 83       	st	Z, r24
 b0c:	08 95       	ret

00000b0e <__subsf3>:
 b0e:	50 58       	subi	r21, 0x80	; 128

00000b10 <__addsf3>:
 b10:	bb 27       	eor	r27, r27
 b12:	aa 27       	eor	r26, r26
 b14:	0e d0       	rcall	.+28     	; 0xb32 <__addsf3x>
 b16:	84 c1       	rjmp	.+776    	; 0xe20 <__fp_round>
 b18:	75 d1       	rcall	.+746    	; 0xe04 <__fp_pscA>
 b1a:	30 f0       	brcs	.+12     	; 0xb28 <__addsf3+0x18>
 b1c:	7a d1       	rcall	.+756    	; 0xe12 <__fp_pscB>
 b1e:	20 f0       	brcs	.+8      	; 0xb28 <__addsf3+0x18>
 b20:	31 f4       	brne	.+12     	; 0xb2e <__addsf3+0x1e>
 b22:	9f 3f       	cpi	r25, 0xFF	; 255
 b24:	11 f4       	brne	.+4      	; 0xb2a <__addsf3+0x1a>
 b26:	1e f4       	brtc	.+6      	; 0xb2e <__addsf3+0x1e>
 b28:	6a c1       	rjmp	.+724    	; 0xdfe <__fp_nan>
 b2a:	0e f4       	brtc	.+2      	; 0xb2e <__addsf3+0x1e>
 b2c:	e0 95       	com	r30
 b2e:	e7 fb       	bst	r30, 7
 b30:	37 c1       	rjmp	.+622    	; 0xda0 <__fp_inf>

00000b32 <__addsf3x>:
 b32:	e9 2f       	mov	r30, r25
 b34:	86 d1       	rcall	.+780    	; 0xe42 <__fp_split3>
 b36:	80 f3       	brcs	.-32     	; 0xb18 <__addsf3+0x8>
 b38:	ba 17       	cp	r27, r26
 b3a:	62 07       	cpc	r22, r18
 b3c:	73 07       	cpc	r23, r19
 b3e:	84 07       	cpc	r24, r20
 b40:	95 07       	cpc	r25, r21
 b42:	18 f0       	brcs	.+6      	; 0xb4a <__addsf3x+0x18>
 b44:	71 f4       	brne	.+28     	; 0xb62 <__addsf3x+0x30>
 b46:	9e f5       	brtc	.+102    	; 0xbae <__addsf3x+0x7c>
 b48:	b5 c1       	rjmp	.+874    	; 0xeb4 <__fp_zero>
 b4a:	0e f4       	brtc	.+2      	; 0xb4e <__addsf3x+0x1c>
 b4c:	e0 95       	com	r30
 b4e:	0b 2e       	mov	r0, r27
 b50:	ba 2f       	mov	r27, r26
 b52:	a0 2d       	mov	r26, r0
 b54:	0b 01       	movw	r0, r22
 b56:	b9 01       	movw	r22, r18
 b58:	90 01       	movw	r18, r0
 b5a:	0c 01       	movw	r0, r24
 b5c:	ca 01       	movw	r24, r20
 b5e:	a0 01       	movw	r20, r0
 b60:	11 24       	eor	r1, r1
 b62:	ff 27       	eor	r31, r31
 b64:	59 1b       	sub	r21, r25
 b66:	99 f0       	breq	.+38     	; 0xb8e <__addsf3x+0x5c>
 b68:	59 3f       	cpi	r21, 0xF9	; 249
 b6a:	50 f4       	brcc	.+20     	; 0xb80 <__addsf3x+0x4e>
 b6c:	50 3e       	cpi	r21, 0xE0	; 224
 b6e:	68 f1       	brcs	.+90     	; 0xbca <__addsf3x+0x98>
 b70:	1a 16       	cp	r1, r26
 b72:	f0 40       	sbci	r31, 0x00	; 0
 b74:	a2 2f       	mov	r26, r18
 b76:	23 2f       	mov	r18, r19
 b78:	34 2f       	mov	r19, r20
 b7a:	44 27       	eor	r20, r20
 b7c:	58 5f       	subi	r21, 0xF8	; 248
 b7e:	f3 cf       	rjmp	.-26     	; 0xb66 <__addsf3x+0x34>
 b80:	46 95       	lsr	r20
 b82:	37 95       	ror	r19
 b84:	27 95       	ror	r18
 b86:	a7 95       	ror	r26
 b88:	f0 40       	sbci	r31, 0x00	; 0
 b8a:	53 95       	inc	r21
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__addsf3x+0x4e>
 b8e:	7e f4       	brtc	.+30     	; 0xbae <__addsf3x+0x7c>
 b90:	1f 16       	cp	r1, r31
 b92:	ba 0b       	sbc	r27, r26
 b94:	62 0b       	sbc	r22, r18
 b96:	73 0b       	sbc	r23, r19
 b98:	84 0b       	sbc	r24, r20
 b9a:	ba f0       	brmi	.+46     	; 0xbca <__addsf3x+0x98>
 b9c:	91 50       	subi	r25, 0x01	; 1
 b9e:	a1 f0       	breq	.+40     	; 0xbc8 <__addsf3x+0x96>
 ba0:	ff 0f       	add	r31, r31
 ba2:	bb 1f       	adc	r27, r27
 ba4:	66 1f       	adc	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	c2 f7       	brpl	.-16     	; 0xb9c <__addsf3x+0x6a>
 bac:	0e c0       	rjmp	.+28     	; 0xbca <__addsf3x+0x98>
 bae:	ba 0f       	add	r27, r26
 bb0:	62 1f       	adc	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	48 f4       	brcc	.+18     	; 0xbca <__addsf3x+0x98>
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b7 95       	ror	r27
 bc0:	f7 95       	ror	r31
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	08 f0       	brcs	.+2      	; 0xbc8 <__addsf3x+0x96>
 bc6:	b3 cf       	rjmp	.-154    	; 0xb2e <__addsf3+0x1e>
 bc8:	93 95       	inc	r25
 bca:	88 0f       	add	r24, r24
 bcc:	08 f0       	brcs	.+2      	; 0xbd0 <__addsf3x+0x9e>
 bce:	99 27       	eor	r25, r25
 bd0:	ee 0f       	add	r30, r30
 bd2:	97 95       	ror	r25
 bd4:	87 95       	ror	r24
 bd6:	08 95       	ret

00000bd8 <ceil>:
 bd8:	56 d1       	rcall	.+684    	; 0xe86 <__fp_trunc>
 bda:	80 f0       	brcs	.+32     	; 0xbfc <ceil+0x24>
 bdc:	9f 37       	cpi	r25, 0x7F	; 127
 bde:	40 f4       	brcc	.+16     	; 0xbf0 <ceil+0x18>
 be0:	91 11       	cpse	r25, r1
 be2:	0e f4       	brtc	.+2      	; 0xbe6 <ceil+0xe>
 be4:	68 c1       	rjmp	.+720    	; 0xeb6 <__fp_szero>
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	70 e0       	ldi	r23, 0x00	; 0
 bea:	80 e8       	ldi	r24, 0x80	; 128
 bec:	9f e3       	ldi	r25, 0x3F	; 63
 bee:	08 95       	ret
 bf0:	26 f0       	brts	.+8      	; 0xbfa <ceil+0x22>
 bf2:	1b 16       	cp	r1, r27
 bf4:	61 1d       	adc	r22, r1
 bf6:	71 1d       	adc	r23, r1
 bf8:	81 1d       	adc	r24, r1
 bfa:	d8 c0       	rjmp	.+432    	; 0xdac <__fp_mintl>
 bfc:	f2 c0       	rjmp	.+484    	; 0xde2 <__fp_mpack>

00000bfe <__divsf3>:
 bfe:	0c d0       	rcall	.+24     	; 0xc18 <__divsf3x>
 c00:	0f c1       	rjmp	.+542    	; 0xe20 <__fp_round>
 c02:	07 d1       	rcall	.+526    	; 0xe12 <__fp_pscB>
 c04:	40 f0       	brcs	.+16     	; 0xc16 <__divsf3+0x18>
 c06:	fe d0       	rcall	.+508    	; 0xe04 <__fp_pscA>
 c08:	30 f0       	brcs	.+12     	; 0xc16 <__divsf3+0x18>
 c0a:	21 f4       	brne	.+8      	; 0xc14 <__divsf3+0x16>
 c0c:	5f 3f       	cpi	r21, 0xFF	; 255
 c0e:	19 f0       	breq	.+6      	; 0xc16 <__divsf3+0x18>
 c10:	c7 c0       	rjmp	.+398    	; 0xda0 <__fp_inf>
 c12:	51 11       	cpse	r21, r1
 c14:	50 c1       	rjmp	.+672    	; 0xeb6 <__fp_szero>
 c16:	f3 c0       	rjmp	.+486    	; 0xdfe <__fp_nan>

00000c18 <__divsf3x>:
 c18:	14 d1       	rcall	.+552    	; 0xe42 <__fp_split3>
 c1a:	98 f3       	brcs	.-26     	; 0xc02 <__divsf3+0x4>

00000c1c <__divsf3_pse>:
 c1c:	99 23       	and	r25, r25
 c1e:	c9 f3       	breq	.-14     	; 0xc12 <__divsf3+0x14>
 c20:	55 23       	and	r21, r21
 c22:	b1 f3       	breq	.-20     	; 0xc10 <__divsf3+0x12>
 c24:	95 1b       	sub	r25, r21
 c26:	55 0b       	sbc	r21, r21
 c28:	bb 27       	eor	r27, r27
 c2a:	aa 27       	eor	r26, r26
 c2c:	62 17       	cp	r22, r18
 c2e:	73 07       	cpc	r23, r19
 c30:	84 07       	cpc	r24, r20
 c32:	38 f0       	brcs	.+14     	; 0xc42 <__divsf3_pse+0x26>
 c34:	9f 5f       	subi	r25, 0xFF	; 255
 c36:	5f 4f       	sbci	r21, 0xFF	; 255
 c38:	22 0f       	add	r18, r18
 c3a:	33 1f       	adc	r19, r19
 c3c:	44 1f       	adc	r20, r20
 c3e:	aa 1f       	adc	r26, r26
 c40:	a9 f3       	breq	.-22     	; 0xc2c <__divsf3_pse+0x10>
 c42:	33 d0       	rcall	.+102    	; 0xcaa <__divsf3_pse+0x8e>
 c44:	0e 2e       	mov	r0, r30
 c46:	3a f0       	brmi	.+14     	; 0xc56 <__divsf3_pse+0x3a>
 c48:	e0 e8       	ldi	r30, 0x80	; 128
 c4a:	30 d0       	rcall	.+96     	; 0xcac <__divsf3_pse+0x90>
 c4c:	91 50       	subi	r25, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	e6 95       	lsr	r30
 c52:	00 1c       	adc	r0, r0
 c54:	ca f7       	brpl	.-14     	; 0xc48 <__divsf3_pse+0x2c>
 c56:	29 d0       	rcall	.+82     	; 0xcaa <__divsf3_pse+0x8e>
 c58:	fe 2f       	mov	r31, r30
 c5a:	27 d0       	rcall	.+78     	; 0xcaa <__divsf3_pse+0x8e>
 c5c:	66 0f       	add	r22, r22
 c5e:	77 1f       	adc	r23, r23
 c60:	88 1f       	adc	r24, r24
 c62:	bb 1f       	adc	r27, r27
 c64:	26 17       	cp	r18, r22
 c66:	37 07       	cpc	r19, r23
 c68:	48 07       	cpc	r20, r24
 c6a:	ab 07       	cpc	r26, r27
 c6c:	b0 e8       	ldi	r27, 0x80	; 128
 c6e:	09 f0       	breq	.+2      	; 0xc72 <__divsf3_pse+0x56>
 c70:	bb 0b       	sbc	r27, r27
 c72:	80 2d       	mov	r24, r0
 c74:	bf 01       	movw	r22, r30
 c76:	ff 27       	eor	r31, r31
 c78:	93 58       	subi	r25, 0x83	; 131
 c7a:	5f 4f       	sbci	r21, 0xFF	; 255
 c7c:	2a f0       	brmi	.+10     	; 0xc88 <__divsf3_pse+0x6c>
 c7e:	9e 3f       	cpi	r25, 0xFE	; 254
 c80:	51 05       	cpc	r21, r1
 c82:	68 f0       	brcs	.+26     	; 0xc9e <__divsf3_pse+0x82>
 c84:	8d c0       	rjmp	.+282    	; 0xda0 <__fp_inf>
 c86:	17 c1       	rjmp	.+558    	; 0xeb6 <__fp_szero>
 c88:	5f 3f       	cpi	r21, 0xFF	; 255
 c8a:	ec f3       	brlt	.-6      	; 0xc86 <__divsf3_pse+0x6a>
 c8c:	98 3e       	cpi	r25, 0xE8	; 232
 c8e:	dc f3       	brlt	.-10     	; 0xc86 <__divsf3_pse+0x6a>
 c90:	86 95       	lsr	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	b7 95       	ror	r27
 c98:	f7 95       	ror	r31
 c9a:	9f 5f       	subi	r25, 0xFF	; 255
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__divsf3_pse+0x74>
 c9e:	88 0f       	add	r24, r24
 ca0:	91 1d       	adc	r25, r1
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret
 caa:	e1 e0       	ldi	r30, 0x01	; 1
 cac:	66 0f       	add	r22, r22
 cae:	77 1f       	adc	r23, r23
 cb0:	88 1f       	adc	r24, r24
 cb2:	bb 1f       	adc	r27, r27
 cb4:	62 17       	cp	r22, r18
 cb6:	73 07       	cpc	r23, r19
 cb8:	84 07       	cpc	r24, r20
 cba:	ba 07       	cpc	r27, r26
 cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__divsf3_pse+0xaa>
 cbe:	62 1b       	sub	r22, r18
 cc0:	73 0b       	sbc	r23, r19
 cc2:	84 0b       	sbc	r24, r20
 cc4:	ba 0b       	sbc	r27, r26
 cc6:	ee 1f       	adc	r30, r30
 cc8:	88 f7       	brcc	.-30     	; 0xcac <__divsf3_pse+0x90>
 cca:	e0 95       	com	r30
 ccc:	08 95       	ret

00000cce <__fixunssfsi>:
 cce:	c1 d0       	rcall	.+386    	; 0xe52 <__fp_splitA>
 cd0:	88 f0       	brcs	.+34     	; 0xcf4 <__fixunssfsi+0x26>
 cd2:	9f 57       	subi	r25, 0x7F	; 127
 cd4:	90 f0       	brcs	.+36     	; 0xcfa <__fixunssfsi+0x2c>
 cd6:	b9 2f       	mov	r27, r25
 cd8:	99 27       	eor	r25, r25
 cda:	b7 51       	subi	r27, 0x17	; 23
 cdc:	a0 f0       	brcs	.+40     	; 0xd06 <__fixunssfsi+0x38>
 cde:	d1 f0       	breq	.+52     	; 0xd14 <__fixunssfsi+0x46>
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	1a f0       	brmi	.+6      	; 0xcf0 <__fixunssfsi+0x22>
 cea:	ba 95       	dec	r27
 cec:	c9 f7       	brne	.-14     	; 0xce0 <__fixunssfsi+0x12>
 cee:	12 c0       	rjmp	.+36     	; 0xd14 <__fixunssfsi+0x46>
 cf0:	b1 30       	cpi	r27, 0x01	; 1
 cf2:	81 f0       	breq	.+32     	; 0xd14 <__fixunssfsi+0x46>
 cf4:	df d0       	rcall	.+446    	; 0xeb4 <__fp_zero>
 cf6:	b1 e0       	ldi	r27, 0x01	; 1
 cf8:	08 95       	ret
 cfa:	dc c0       	rjmp	.+440    	; 0xeb4 <__fp_zero>
 cfc:	67 2f       	mov	r22, r23
 cfe:	78 2f       	mov	r23, r24
 d00:	88 27       	eor	r24, r24
 d02:	b8 5f       	subi	r27, 0xF8	; 248
 d04:	39 f0       	breq	.+14     	; 0xd14 <__fixunssfsi+0x46>
 d06:	b9 3f       	cpi	r27, 0xF9	; 249
 d08:	cc f3       	brlt	.-14     	; 0xcfc <__fixunssfsi+0x2e>
 d0a:	86 95       	lsr	r24
 d0c:	77 95       	ror	r23
 d0e:	67 95       	ror	r22
 d10:	b3 95       	inc	r27
 d12:	d9 f7       	brne	.-10     	; 0xd0a <__fixunssfsi+0x3c>
 d14:	3e f4       	brtc	.+14     	; 0xd24 <__fixunssfsi+0x56>
 d16:	90 95       	com	r25
 d18:	80 95       	com	r24
 d1a:	70 95       	com	r23
 d1c:	61 95       	neg	r22
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255
 d20:	8f 4f       	sbci	r24, 0xFF	; 255
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	08 95       	ret

00000d26 <__floatunsisf>:
 d26:	e8 94       	clt
 d28:	09 c0       	rjmp	.+18     	; 0xd3c <__floatsisf+0x12>

00000d2a <__floatsisf>:
 d2a:	97 fb       	bst	r25, 7
 d2c:	3e f4       	brtc	.+14     	; 0xd3c <__floatsisf+0x12>
 d2e:	90 95       	com	r25
 d30:	80 95       	com	r24
 d32:	70 95       	com	r23
 d34:	61 95       	neg	r22
 d36:	7f 4f       	sbci	r23, 0xFF	; 255
 d38:	8f 4f       	sbci	r24, 0xFF	; 255
 d3a:	9f 4f       	sbci	r25, 0xFF	; 255
 d3c:	99 23       	and	r25, r25
 d3e:	a9 f0       	breq	.+42     	; 0xd6a <__floatsisf+0x40>
 d40:	f9 2f       	mov	r31, r25
 d42:	96 e9       	ldi	r25, 0x96	; 150
 d44:	bb 27       	eor	r27, r27
 d46:	93 95       	inc	r25
 d48:	f6 95       	lsr	r31
 d4a:	87 95       	ror	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f1 11       	cpse	r31, r1
 d54:	f8 cf       	rjmp	.-16     	; 0xd46 <__floatsisf+0x1c>
 d56:	fa f4       	brpl	.+62     	; 0xd96 <__floatsisf+0x6c>
 d58:	bb 0f       	add	r27, r27
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__floatsisf+0x36>
 d5c:	60 ff       	sbrs	r22, 0
 d5e:	1b c0       	rjmp	.+54     	; 0xd96 <__floatsisf+0x6c>
 d60:	6f 5f       	subi	r22, 0xFF	; 255
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	16 c0       	rjmp	.+44     	; 0xd96 <__floatsisf+0x6c>
 d6a:	88 23       	and	r24, r24
 d6c:	11 f0       	breq	.+4      	; 0xd72 <__floatsisf+0x48>
 d6e:	96 e9       	ldi	r25, 0x96	; 150
 d70:	11 c0       	rjmp	.+34     	; 0xd94 <__floatsisf+0x6a>
 d72:	77 23       	and	r23, r23
 d74:	21 f0       	breq	.+8      	; 0xd7e <__floatsisf+0x54>
 d76:	9e e8       	ldi	r25, 0x8E	; 142
 d78:	87 2f       	mov	r24, r23
 d7a:	76 2f       	mov	r23, r22
 d7c:	05 c0       	rjmp	.+10     	; 0xd88 <__floatsisf+0x5e>
 d7e:	66 23       	and	r22, r22
 d80:	71 f0       	breq	.+28     	; 0xd9e <__floatsisf+0x74>
 d82:	96 e8       	ldi	r25, 0x86	; 134
 d84:	86 2f       	mov	r24, r22
 d86:	70 e0       	ldi	r23, 0x00	; 0
 d88:	60 e0       	ldi	r22, 0x00	; 0
 d8a:	2a f0       	brmi	.+10     	; 0xd96 <__floatsisf+0x6c>
 d8c:	9a 95       	dec	r25
 d8e:	66 0f       	add	r22, r22
 d90:	77 1f       	adc	r23, r23
 d92:	88 1f       	adc	r24, r24
 d94:	da f7       	brpl	.-10     	; 0xd8c <__floatsisf+0x62>
 d96:	88 0f       	add	r24, r24
 d98:	96 95       	lsr	r25
 d9a:	87 95       	ror	r24
 d9c:	97 f9       	bld	r25, 7
 d9e:	08 95       	ret

00000da0 <__fp_inf>:
 da0:	97 f9       	bld	r25, 7
 da2:	9f 67       	ori	r25, 0x7F	; 127
 da4:	80 e8       	ldi	r24, 0x80	; 128
 da6:	70 e0       	ldi	r23, 0x00	; 0
 da8:	60 e0       	ldi	r22, 0x00	; 0
 daa:	08 95       	ret

00000dac <__fp_mintl>:
 dac:	88 23       	and	r24, r24
 dae:	71 f4       	brne	.+28     	; 0xdcc <__fp_mintl+0x20>
 db0:	77 23       	and	r23, r23
 db2:	21 f0       	breq	.+8      	; 0xdbc <__fp_mintl+0x10>
 db4:	98 50       	subi	r25, 0x08	; 8
 db6:	87 2b       	or	r24, r23
 db8:	76 2f       	mov	r23, r22
 dba:	07 c0       	rjmp	.+14     	; 0xdca <__fp_mintl+0x1e>
 dbc:	66 23       	and	r22, r22
 dbe:	11 f4       	brne	.+4      	; 0xdc4 <__fp_mintl+0x18>
 dc0:	99 27       	eor	r25, r25
 dc2:	0d c0       	rjmp	.+26     	; 0xdde <__fp_mintl+0x32>
 dc4:	90 51       	subi	r25, 0x10	; 16
 dc6:	86 2b       	or	r24, r22
 dc8:	70 e0       	ldi	r23, 0x00	; 0
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__fp_mintl+0x2c>
 dce:	9a 95       	dec	r25
 dd0:	66 0f       	add	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	da f7       	brpl	.-10     	; 0xdce <__fp_mintl+0x22>
 dd8:	88 0f       	add	r24, r24
 dda:	96 95       	lsr	r25
 ddc:	87 95       	ror	r24
 dde:	97 f9       	bld	r25, 7
 de0:	08 95       	ret

00000de2 <__fp_mpack>:
 de2:	9f 3f       	cpi	r25, 0xFF	; 255
 de4:	31 f0       	breq	.+12     	; 0xdf2 <__fp_mpack_finite+0xc>

00000de6 <__fp_mpack_finite>:
 de6:	91 50       	subi	r25, 0x01	; 1
 de8:	20 f4       	brcc	.+8      	; 0xdf2 <__fp_mpack_finite+0xc>
 dea:	87 95       	ror	r24
 dec:	77 95       	ror	r23
 dee:	67 95       	ror	r22
 df0:	b7 95       	ror	r27
 df2:	88 0f       	add	r24, r24
 df4:	91 1d       	adc	r25, r1
 df6:	96 95       	lsr	r25
 df8:	87 95       	ror	r24
 dfa:	97 f9       	bld	r25, 7
 dfc:	08 95       	ret

00000dfe <__fp_nan>:
 dfe:	9f ef       	ldi	r25, 0xFF	; 255
 e00:	80 ec       	ldi	r24, 0xC0	; 192
 e02:	08 95       	ret

00000e04 <__fp_pscA>:
 e04:	00 24       	eor	r0, r0
 e06:	0a 94       	dec	r0
 e08:	16 16       	cp	r1, r22
 e0a:	17 06       	cpc	r1, r23
 e0c:	18 06       	cpc	r1, r24
 e0e:	09 06       	cpc	r0, r25
 e10:	08 95       	ret

00000e12 <__fp_pscB>:
 e12:	00 24       	eor	r0, r0
 e14:	0a 94       	dec	r0
 e16:	12 16       	cp	r1, r18
 e18:	13 06       	cpc	r1, r19
 e1a:	14 06       	cpc	r1, r20
 e1c:	05 06       	cpc	r0, r21
 e1e:	08 95       	ret

00000e20 <__fp_round>:
 e20:	09 2e       	mov	r0, r25
 e22:	03 94       	inc	r0
 e24:	00 0c       	add	r0, r0
 e26:	11 f4       	brne	.+4      	; 0xe2c <__fp_round+0xc>
 e28:	88 23       	and	r24, r24
 e2a:	52 f0       	brmi	.+20     	; 0xe40 <__fp_round+0x20>
 e2c:	bb 0f       	add	r27, r27
 e2e:	40 f4       	brcc	.+16     	; 0xe40 <__fp_round+0x20>
 e30:	bf 2b       	or	r27, r31
 e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_round+0x18>
 e34:	60 ff       	sbrs	r22, 0
 e36:	04 c0       	rjmp	.+8      	; 0xe40 <__fp_round+0x20>
 e38:	6f 5f       	subi	r22, 0xFF	; 255
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255
 e3c:	8f 4f       	sbci	r24, 0xFF	; 255
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	08 95       	ret

00000e42 <__fp_split3>:
 e42:	57 fd       	sbrc	r21, 7
 e44:	90 58       	subi	r25, 0x80	; 128
 e46:	44 0f       	add	r20, r20
 e48:	55 1f       	adc	r21, r21
 e4a:	59 f0       	breq	.+22     	; 0xe62 <__fp_splitA+0x10>
 e4c:	5f 3f       	cpi	r21, 0xFF	; 255
 e4e:	71 f0       	breq	.+28     	; 0xe6c <__fp_splitA+0x1a>
 e50:	47 95       	ror	r20

00000e52 <__fp_splitA>:
 e52:	88 0f       	add	r24, r24
 e54:	97 fb       	bst	r25, 7
 e56:	99 1f       	adc	r25, r25
 e58:	61 f0       	breq	.+24     	; 0xe72 <__fp_splitA+0x20>
 e5a:	9f 3f       	cpi	r25, 0xFF	; 255
 e5c:	79 f0       	breq	.+30     	; 0xe7c <__fp_splitA+0x2a>
 e5e:	87 95       	ror	r24
 e60:	08 95       	ret
 e62:	12 16       	cp	r1, r18
 e64:	13 06       	cpc	r1, r19
 e66:	14 06       	cpc	r1, r20
 e68:	55 1f       	adc	r21, r21
 e6a:	f2 cf       	rjmp	.-28     	; 0xe50 <__fp_split3+0xe>
 e6c:	46 95       	lsr	r20
 e6e:	f1 df       	rcall	.-30     	; 0xe52 <__fp_splitA>
 e70:	08 c0       	rjmp	.+16     	; 0xe82 <__fp_splitA+0x30>
 e72:	16 16       	cp	r1, r22
 e74:	17 06       	cpc	r1, r23
 e76:	18 06       	cpc	r1, r24
 e78:	99 1f       	adc	r25, r25
 e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <__fp_splitA+0xc>
 e7c:	86 95       	lsr	r24
 e7e:	71 05       	cpc	r23, r1
 e80:	61 05       	cpc	r22, r1
 e82:	08 94       	sec
 e84:	08 95       	ret

00000e86 <__fp_trunc>:
 e86:	e5 df       	rcall	.-54     	; 0xe52 <__fp_splitA>
 e88:	a0 f0       	brcs	.+40     	; 0xeb2 <__fp_trunc+0x2c>
 e8a:	be e7       	ldi	r27, 0x7E	; 126
 e8c:	b9 17       	cp	r27, r25
 e8e:	88 f4       	brcc	.+34     	; 0xeb2 <__fp_trunc+0x2c>
 e90:	bb 27       	eor	r27, r27
 e92:	9f 38       	cpi	r25, 0x8F	; 143
 e94:	60 f4       	brcc	.+24     	; 0xeae <__fp_trunc+0x28>
 e96:	16 16       	cp	r1, r22
 e98:	b1 1d       	adc	r27, r1
 e9a:	67 2f       	mov	r22, r23
 e9c:	78 2f       	mov	r23, r24
 e9e:	88 27       	eor	r24, r24
 ea0:	98 5f       	subi	r25, 0xF8	; 248
 ea2:	f7 cf       	rjmp	.-18     	; 0xe92 <__fp_trunc+0xc>
 ea4:	86 95       	lsr	r24
 ea6:	77 95       	ror	r23
 ea8:	67 95       	ror	r22
 eaa:	b1 1d       	adc	r27, r1
 eac:	93 95       	inc	r25
 eae:	96 39       	cpi	r25, 0x96	; 150
 eb0:	c8 f3       	brcs	.-14     	; 0xea4 <__fp_trunc+0x1e>
 eb2:	08 95       	ret

00000eb4 <__fp_zero>:
 eb4:	e8 94       	clt

00000eb6 <__fp_szero>:
 eb6:	bb 27       	eor	r27, r27
 eb8:	66 27       	eor	r22, r22
 eba:	77 27       	eor	r23, r23
 ebc:	cb 01       	movw	r24, r22
 ebe:	97 f9       	bld	r25, 7
 ec0:	08 95       	ret

00000ec2 <__mulsf3>:
 ec2:	0b d0       	rcall	.+22     	; 0xeda <__mulsf3x>
 ec4:	ad cf       	rjmp	.-166    	; 0xe20 <__fp_round>
 ec6:	9e df       	rcall	.-196    	; 0xe04 <__fp_pscA>
 ec8:	28 f0       	brcs	.+10     	; 0xed4 <__mulsf3+0x12>
 eca:	a3 df       	rcall	.-186    	; 0xe12 <__fp_pscB>
 ecc:	18 f0       	brcs	.+6      	; 0xed4 <__mulsf3+0x12>
 ece:	95 23       	and	r25, r21
 ed0:	09 f0       	breq	.+2      	; 0xed4 <__mulsf3+0x12>
 ed2:	66 cf       	rjmp	.-308    	; 0xda0 <__fp_inf>
 ed4:	94 cf       	rjmp	.-216    	; 0xdfe <__fp_nan>
 ed6:	11 24       	eor	r1, r1
 ed8:	ee cf       	rjmp	.-36     	; 0xeb6 <__fp_szero>

00000eda <__mulsf3x>:
 eda:	b3 df       	rcall	.-154    	; 0xe42 <__fp_split3>
 edc:	a0 f3       	brcs	.-24     	; 0xec6 <__mulsf3+0x4>

00000ede <__mulsf3_pse>:
 ede:	95 9f       	mul	r25, r21
 ee0:	d1 f3       	breq	.-12     	; 0xed6 <__mulsf3+0x14>
 ee2:	95 0f       	add	r25, r21
 ee4:	50 e0       	ldi	r21, 0x00	; 0
 ee6:	55 1f       	adc	r21, r21
 ee8:	62 9f       	mul	r22, r18
 eea:	f0 01       	movw	r30, r0
 eec:	72 9f       	mul	r23, r18
 eee:	bb 27       	eor	r27, r27
 ef0:	f0 0d       	add	r31, r0
 ef2:	b1 1d       	adc	r27, r1
 ef4:	63 9f       	mul	r22, r19
 ef6:	aa 27       	eor	r26, r26
 ef8:	f0 0d       	add	r31, r0
 efa:	b1 1d       	adc	r27, r1
 efc:	aa 1f       	adc	r26, r26
 efe:	64 9f       	mul	r22, r20
 f00:	66 27       	eor	r22, r22
 f02:	b0 0d       	add	r27, r0
 f04:	a1 1d       	adc	r26, r1
 f06:	66 1f       	adc	r22, r22
 f08:	82 9f       	mul	r24, r18
 f0a:	22 27       	eor	r18, r18
 f0c:	b0 0d       	add	r27, r0
 f0e:	a1 1d       	adc	r26, r1
 f10:	62 1f       	adc	r22, r18
 f12:	73 9f       	mul	r23, r19
 f14:	b0 0d       	add	r27, r0
 f16:	a1 1d       	adc	r26, r1
 f18:	62 1f       	adc	r22, r18
 f1a:	83 9f       	mul	r24, r19
 f1c:	a0 0d       	add	r26, r0
 f1e:	61 1d       	adc	r22, r1
 f20:	22 1f       	adc	r18, r18
 f22:	74 9f       	mul	r23, r20
 f24:	33 27       	eor	r19, r19
 f26:	a0 0d       	add	r26, r0
 f28:	61 1d       	adc	r22, r1
 f2a:	23 1f       	adc	r18, r19
 f2c:	84 9f       	mul	r24, r20
 f2e:	60 0d       	add	r22, r0
 f30:	21 1d       	adc	r18, r1
 f32:	82 2f       	mov	r24, r18
 f34:	76 2f       	mov	r23, r22
 f36:	6a 2f       	mov	r22, r26
 f38:	11 24       	eor	r1, r1
 f3a:	9f 57       	subi	r25, 0x7F	; 127
 f3c:	50 40       	sbci	r21, 0x00	; 0
 f3e:	8a f0       	brmi	.+34     	; 0xf62 <__mulsf3_pse+0x84>
 f40:	e1 f0       	breq	.+56     	; 0xf7a <__mulsf3_pse+0x9c>
 f42:	88 23       	and	r24, r24
 f44:	4a f0       	brmi	.+18     	; 0xf58 <__mulsf3_pse+0x7a>
 f46:	ee 0f       	add	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	bb 1f       	adc	r27, r27
 f4c:	66 1f       	adc	r22, r22
 f4e:	77 1f       	adc	r23, r23
 f50:	88 1f       	adc	r24, r24
 f52:	91 50       	subi	r25, 0x01	; 1
 f54:	50 40       	sbci	r21, 0x00	; 0
 f56:	a9 f7       	brne	.-22     	; 0xf42 <__mulsf3_pse+0x64>
 f58:	9e 3f       	cpi	r25, 0xFE	; 254
 f5a:	51 05       	cpc	r21, r1
 f5c:	70 f0       	brcs	.+28     	; 0xf7a <__mulsf3_pse+0x9c>
 f5e:	20 cf       	rjmp	.-448    	; 0xda0 <__fp_inf>
 f60:	aa cf       	rjmp	.-172    	; 0xeb6 <__fp_szero>
 f62:	5f 3f       	cpi	r21, 0xFF	; 255
 f64:	ec f3       	brlt	.-6      	; 0xf60 <__mulsf3_pse+0x82>
 f66:	98 3e       	cpi	r25, 0xE8	; 232
 f68:	dc f3       	brlt	.-10     	; 0xf60 <__mulsf3_pse+0x82>
 f6a:	86 95       	lsr	r24
 f6c:	77 95       	ror	r23
 f6e:	67 95       	ror	r22
 f70:	b7 95       	ror	r27
 f72:	f7 95       	ror	r31
 f74:	e7 95       	ror	r30
 f76:	9f 5f       	subi	r25, 0xFF	; 255
 f78:	c1 f7       	brne	.-16     	; 0xf6a <__mulsf3_pse+0x8c>
 f7a:	fe 2b       	or	r31, r30
 f7c:	88 0f       	add	r24, r24
 f7e:	91 1d       	adc	r25, r1
 f80:	96 95       	lsr	r25
 f82:	87 95       	ror	r24
 f84:	97 f9       	bld	r25, 7
 f86:	08 95       	ret

00000f88 <__muluhisi3>:
 f88:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__umulhisi3>
 f8c:	a5 9f       	mul	r26, r21
 f8e:	90 0d       	add	r25, r0
 f90:	b4 9f       	mul	r27, r20
 f92:	90 0d       	add	r25, r0
 f94:	a4 9f       	mul	r26, r20
 f96:	80 0d       	add	r24, r0
 f98:	91 1d       	adc	r25, r1
 f9a:	11 24       	eor	r1, r1
 f9c:	08 95       	ret

00000f9e <__umulhisi3>:
 f9e:	a2 9f       	mul	r26, r18
 fa0:	b0 01       	movw	r22, r0
 fa2:	b3 9f       	mul	r27, r19
 fa4:	c0 01       	movw	r24, r0
 fa6:	a3 9f       	mul	r26, r19
 fa8:	01 d0       	rcall	.+2      	; 0xfac <__umulhisi3+0xe>
 faa:	b2 9f       	mul	r27, r18
 fac:	70 0d       	add	r23, r0
 fae:	81 1d       	adc	r24, r1
 fb0:	11 24       	eor	r1, r1
 fb2:	91 1d       	adc	r25, r1
 fb4:	08 95       	ret

00000fb6 <_exit>:
 fb6:	f8 94       	cli

00000fb8 <__stop_program>:
 fb8:	ff cf       	rjmp	.-2      	; 0xfb8 <__stop_program>
